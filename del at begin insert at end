#deletion at begin insertion at end
class Node():
    def __init__(self,data):
        self.data=data
        self.perv=None
        self.next=None
class Doublylinkedlist():
    def __init__(self):
        self.head=None
    def iae(self,data):
        newnode=Node(data)
        if self.head is None:#check head node is empty
            self.head=newnode #if head is empty nwenode is assigned as head node
            return
        temp=self.head  #temp is current location
        while temp.next:
            temp=temp.next 
        temp.next=newnode
        newnode.prev=temp
    def deletebegin(self):
        if not self.head:
            print("cant perform delete in an empty list..")
        print(f"Deleted node from beginning..",self.head.data)
        self.head=self.head.next
        if self.head:
            self.head.prev=None
    def display(self):
        temp=self.head
        print("Doubly Linked List:")
        while temp:
            print(temp.data,end="<--->")
            temp=temp.next
        print("Null")
dll=Doublylinkedlist()
n=int(input("Enter the number of Elements to insert at end  :"))
for i in range(n):
    val=int(input(f" Enter element {i+1}:"))
    dll.iae(val)
dll.display()
d=int(input("Enter no of times you want to delete:"))
for i in range(d):
    dll.deletebegin()
    dll.display()

output:
Enter the number of Elements to insert at end  : 6
 Enter element 1: 10
 Enter element 2: 20
 Enter element 3: 30
 Enter element 4: 40
 Enter element 5: 50
 Enter element 6: 60
Doubly Linked List:
10<--->20<--->30<--->40<--->50<--->60<--->Null
Enter no of times you want to delete: 3
Deleted node from beginning.. 10
Doubly Linked List:
20<--->30<--->40<--->50<--->60<--->Null
Deleted node from beginning.. 20
Doubly Linked List:
30<--->40<--->50<--->60<--->Null
Deleted node from beginning.. 30
Doubly Linked List:
40<--->50<--->60<--->Null
